	
Label Root
{
	Son: Sea
	Label Sea
	{
		Son: Island
		Label Island
		{
			Param: _idIsland
			Param: _xIsland
			Param: _yIsland
			Param: _known
			Var: _c
			Param: _idKnown
			Param: _s
			Var: _Qisland
			Param: colonyCount

		}

		Son: Agent
		Label Agent
		{
			Param: _idAgent
			Param: _xAgent
			Param: _yAgent
			Var: _a
			Param: _activeMiner
			Param: _xTarget
			Param: _yTarget
			Param: _Qlast
			Param: _xBest
			Param: _yBest
			Var: _cBest
			Var: _Qminer
			Func: explore
			Func: imitate
			Param: _OnIslandID

		}

		Param: pi
		Param: rho
		Param: l0radius
		Param: minSgnPrb
		Param: known_Island_Counter
		Var: Init
		Var: Step
		Func: addIsland
		Var: l
		Param: seaShown
		Param: addATx
		Param: addATy
		Param: Total_island_count
		Param: N
		Func: makeKnown
		Func: addAgentTOSpace
		Param: AgentCount
		Param: alpha
		Param: epsilon
		Param: phi
		Var: Q
		Var: m
		Var: g
		Param: lambda
		Func: makeLink

	}

	Param: latticeOpen
	Param: sizeLattice
	Param: simSpeed

}


DATA

Object: Root C	1
Param: latticeOpen 0 n + n n	0
Param: sizeLattice 0 n + n n	100
Param: simSpeed 0 n + n n	0

Object: Sea C	1
Param: pi 0 n + n n	0.1
Param: rho 0 n + n n	0.1
Param: l0radius 0 n + n n	25
Param: minSgnPrb 0 n + n n	0.01
Param: known_Island_Counter 0 n + n n	300
Var: Init 0 n + n n
Var: Step 0 n + n n
Func: addIsland 0 n + n n
Var: l 1 s + n n	300
Param: seaShown 0 n + n n	1
Param: addATx 0 n + n n	53
Param: addATy 0 n + n n	75
Param: Total_island_count 0 n + n n	1
Param: N 0 n + n n	100
Func: makeKnown 0 n + n n
Func: addAgentTOSpace 0 n + n n
Param: AgentCount 0 n + n n	100
Param: alpha 0 n + n n	1.5
Param: epsilon 0 n + n n	0.1
Param: phi 0 n + n n	0.5
Var: Q 1 s + n n	9316.59
Var: m 1 s + n n	53
Var: g 0 s + n n
Param: lambda 0 n + n n	0
Func: makeLink 0 n + n n

Object: Island C	1
Param: _idIsland 0 n + n n	0
Param: _xIsland 0 n + n n	0
Param: _yIsland 0 n + n n	0
Param: _known 0 n + n n	0
Var: _c 1 n + n n	0
Param: _idKnown 0 n + n n	0
Param: _s 0 n + n n	0
Var: _Qisland 0 n + n n
Param: colonyCount 0 n + n n	0

Object: Agent C	1
Param: _idAgent 0 n + n n	1045
Param: _xAgent 0 n + n n	66
Param: _yAgent 0 n + n n	26
Var: _a 1 n + n n	1
Param: _activeMiner 0 n + n n	1
Param: _xTarget 0 n + n n	0
Param: _yTarget 0 n + n n	0
Param: _Qlast 0 n + n n	188.29
Param: _xBest 0 n + n n	0
Param: _yBest 0 n + n n	0
Var: _cBest 0 n + n n
Var: _Qminer 1 n + n n	194.058
Func: explore 0 n + n n
Func: imitate 0 n + n n
Param: _OnIslandID 0 n + n n	690

SIM_NUM 1
SEED 2
MAX_STEP 800
EQUATION fun_g.cpp
MODELREPORT report_Sim1.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Parameter_latticeOpen
(no description available)
_INIT_

END_DESCRIPTION

Parameter_sizeLattice
(no description available)
_INIT_

END_DESCRIPTION

Parameter_simSpeed
(no description available)
_INIT_

END_DESCRIPTION

Object_Sea
(no description available)
_INIT_

END_DESCRIPTION

Parameter_pi
(no description available)
_INIT_

END_DESCRIPTION

Parameter_rho
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_l0radius
(no description available)
_INIT_

END_DESCRIPTION

Parameter_minSgnPrb
(no description available)
_INIT_

END_DESCRIPTION

Parameter_known_Island_Counter
(no description available)
_INIT_

END_DESCRIPTION

Variable_Init
(no description available)
_INIT_

END_DESCRIPTION

Variable_Step
(no description available)
_INIT_

END_DESCRIPTION

Function_addIsland
(no description available)
_INIT_

END_DESCRIPTION

Variable_l
(no description available)
_INIT_

END_DESCRIPTION

Parameter_seaShown
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_addATx
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_addATy
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter_Total_island_count
(no description available)
_INIT_

END_DESCRIPTION

Parameter_N
(no description available)
_INIT_
All 1 instances equal to 100.
END_DESCRIPTION

Function_makeKnown
(no description available)
_INIT_

END_DESCRIPTION

Function_addAgentTOSpace
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AgentCount
(no description available)
_INIT_

END_DESCRIPTION

Parameter_alpha
(no description available)
_INIT_

END_DESCRIPTION

Parameter_epsilon
(no description available)
_INIT_

END_DESCRIPTION

Parameter_phi
(no description available)
_INIT_

END_DESCRIPTION

Variable_Q
(no description available)
_INIT_

END_DESCRIPTION

Variable_m
(no description available)
_INIT_

END_DESCRIPTION

Variable_g
(no description available)
_INIT_

END_DESCRIPTION

Parameter_lambda
(no description available)
_INIT_

END_DESCRIPTION

Function_makeLink
(no description available)
_INIT_

END_DESCRIPTION

Object_Island
(no description available)
_INIT_

END_DESCRIPTION

Parameter__idIsland
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter__xIsland
(no description available)
_INIT_

END_DESCRIPTION

Parameter__yIsland
(no description available)
_INIT_

END_DESCRIPTION

Parameter__known
(no description available)
_INIT_

END_DESCRIPTION

Variable__c
(no description available)
_INIT_

END_DESCRIPTION

Parameter__idKnown
(no description available)
_INIT_

END_DESCRIPTION

Parameter__s
(no description available)
_INIT_

END_DESCRIPTION

Variable__Qisland
(no description available)
_INIT_

END_DESCRIPTION

Parameter_colonyCount
(no description available)
_INIT_

END_DESCRIPTION

Object_Agent
(no description available)
_INIT_

END_DESCRIPTION

Parameter__idAgent
(no description available)
_INIT_

END_DESCRIPTION

Parameter__xAgent
(no description available)
_INIT_

END_DESCRIPTION

Parameter__yAgent
(no description available)
_INIT_

END_DESCRIPTION

Variable__a
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter__activeMiner
(no description available)
_INIT_
All 1 instances equal to 0.
END_DESCRIPTION

Parameter__xTarget
(no description available)
_INIT_

END_DESCRIPTION

Parameter__yTarget
(no description available)
_INIT_

END_DESCRIPTION

Parameter__Qlast
(no description available)
_INIT_

END_DESCRIPTION

Parameter__xBest
(no description available)
_INIT_

END_DESCRIPTION

Parameter__yBest
(no description available)
_INIT_

END_DESCRIPTION

Variable__cBest
(no description available)
_INIT_

END_DESCRIPTION

Variable__Qminer
(no description available)
_INIT_

END_DESCRIPTION

Function_explore
(no description available)
_INIT_

END_DESCRIPTION

Function_imitate
(no description available)
_INIT_

END_DESCRIPTION

Parameter__OnIslandID
(no description available)
_INIT_

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
//#define EIGENLIB			// uncomment to use Eigen linear algebra library
//#define NO_POINTER_INIT	// uncomment to disable pointer checking

#include "fun_head_fast.h"
// colors of lattice markers
#define UNKNOWN 3								// unknown island - yellow
#define KNOWN 2									// known island - green
#define COLONIZED 1								// colonized island - red
#define SEA 5									// sea (not an island) - blue
#define EXPLORER 1000							// explorer ship - white
#define IMITATOR 0								// imitator ship - black

MODELBEGIN

// insert your equations here, between the MODELBEGIN and MODELEND words

EQUATION( "Init" )
//FAST;
// v[0] = v[1] = 0;								// island/known island counters
// v[2] = V( "pi" );								// island probability
// v[3] = VL( "l", 1 );							// initial number of known islands
// v[4] = V( "l0radius" );							// radius for search for initial islands
// v[5] = V( "rho" );								// degree of locality of interactions
// v[6] = V( "minSgnPrb" );						// minimum signal probability to consider
// v[7] = V( "sizeLattice" );						// size of the lattice window
double island_counter=0;// v[0]
//double known_Island_Counter=0;// v[1]
double island_prob=V( "pi" );// v[2]
double init_known_island= VL( "l", 1 );// v[3]
double l0radius= V( "l0radius" );// v[4]
double rho= V( "rho" );// v[5]
double minSgnPrb= V( "minSgnPrb" );// v[6]
double LatticeSize= V( "sizeLattice" );// v[7]
// check if there are enough islands on the defined radius for setting known islands
if ( init_known_island > l0radius * l0radius && ! ( init_known_island == 1 && l0radius == 0 ) )
{
	PLOG( "\n\nError: invalid l0=%.0lf for l0radius=%.0lf\n", init_known_island, l0radius);
	ABORT;
	END_EQUATION( 0 );
}

MAKE_UNIQUE("Island");
MAKE_UNIQUE("Agent");
PLOG("===========MAKE_UNIQUE===========");
// create the gis space and lattice
if ( LatticeSize > 0 && ! V( "latticeOpen" ) )
{
i = min( LatticeSize, 2 * LAST_T ) + 1;
INIT_SPACE_SINGLE(0,0,i,i);
INIT_LAT_GIS(SEA);
	WRITES( p->up, "latticeOpen", 1 );			// avoid more than one lattice instance
	WRITE( "seaShown", 1 );						// signal this Sea instance has the lattice
	k = 1;
	PLOG("===========GIS Space init ===========");
}
else
	k = 0;										// lattice not open

for ( i = 0; i <= LatticeSize ;++i )
	for ( j = 0; j <= LatticeSize; ++j )
		// draw the existence of an island (except in (0, 0))
		if ( RND < island_prob && ! ( i == 0 && j == 0 ) )
			// create island and add to the graphical lattice if required
{
			//add_island( p, i, j, &v[0], k, v[7] );
			WRITE("addATx",i);
			WRITE("addATy",j);
			V( "addIsland" );
			WRITE_LAT_GIS_XY(i,j,UNKNOWN);
}
PLOG("know island is %g init know is %g",V("known_Island_Counter"),init_known_island);

while( V("known_Island_Counter")< init_known_island )
{

	PLOG("\n====in while");
	if ( V("known_Island_Counter")==0 )
		cur = SEARCH( "Island" );				// first is island at (0, 0) or (1, 1)
	else
		cur = RNDDRAW_FAIR( "Island" );
	int x = VS( cur, "_xIsland" );				// island (0, 0)-centered coordinates
	int y = VS( cur, "_yIsland" );
	// avoid the islands just over the radius or already set as known
	if ( VS( cur, "_known" ) || ( x < - l0radius|| x > l0radius|| y < - l0radius || y > l0radius ) )
		continue;

	INCR("known_Island_Counter",1);

	WRITES( cur, "_known", 1 );		// flag island as known
	WRITES( cur, "_s", abs( x ) + abs( y ) );// island prod. coeff.

	auto ID=UIDS(cur);
	WRITES( cur, "_idIsland", ID );	// save known island id
  WRITE_LAT_GIS_XY(x,y,KNOWN);
		PLOG( "\nKnownIsland=%.0lf at x=%d y=%d with ID=%g", V("known_Island_Counter"), x, y ,ID);
}



PLOG("\n=========== init ends===========");
PARAMETER;						// turn variable into parameter
RESULT( 1 )

EQUATION( "addIsland" )
i=V("addATx");
j=V("addATy");

ADD_TO_SPACE_XY(p,i, j);

// if ( V("Total_island_count") == 0 )							// first island?
// 	cur = SEARCHS( p, "Island" );			// pick existing object
// else
// 	cur = ADDOBJS( p, "Island" );			// add new object instance
INCR("Total_island_count",1);
WRITES( c, "_xIsland", i );				// save island x coordinate
WRITES( c, "_yIsland", j );
auto ID=UIDS(cur);
WRITES( c, "_idIsland", ID);


LOG( "\nIsland=%.0lf at x=%d y=%d with ID=%g",V("Total_island_count"), i, j,ID );

RESULT(0)











MODELEND

// do not add Equations in this area

void close_sim( void )
{
	// close simulation special commands go here
}

END_EQ_FILE

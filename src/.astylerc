#This is the default AStyle formating we use

--style=stroustrup #The base style
--indent=spaces=2 #Use indents of size of 2 spaces
--attach-inlines #Attach braces to class and struct inline function definitions.
--attach-extern-c #Attach braces to a braced extern 'C' statement...
--attach-closing-while # Attach the closing 'while' of a 'do-while' statement to the closing brace. This has precedence over both the brace style and the break closing braces option.
--indent-classes # Indent 'class' and 'struct' blocks so that the entire block is indented.
--indent-switches  #Indent 'switch' blocks so that the 'case X:' statements are indented in the switch block.
--indent-cases  # Indent 'case X:' blocks from the 'case X:' headers.
--indent-namespaces # Add extra indentation to namespace blocks.
--indent-preproc-block # Indent preprocessor blocks at brace level zero and immediately within a namespace.
--indent-preproc-define #Indent multi-line preprocessor definitions ending with a backslash.
--indent-col1-comments #Indent C++ comments beginning in column one. ...
--break-blocks #Pad empty lines around header blocks (e.g. 'if', 'for', 'while'...).
--pad-oper # Insert space padding around operators.
--pad-header #Insert space padding between a header (e.g. 'if', 'for', 'while'...) and the following paren...
--fill-empty-lines # Fill empty lines with the white space of the previous line.
--align-pointer=type # Attach a pointer or reference operator (*, &, or ^) to either the variable type (left) ...
--break-closing-braces #When used with --style=java, --style=kr, --style=stroustrup, --style=linux, or --style=1tbs, this breaks closing headers (e.g. 'else', 'catch', ...) from their immediately preceding closing braces...
--break-one-line-headers #Break one line headers (e.g. 'if', 'while', 'else', ...) from a statement residing on the same line....
--add-one-line-braces #Add one line braces to unbraced one line conditional statements (e.g. 'if', 'for', 'while'...)
--attach-return-type #Attach the return type to the function name. The two options are for the function definitions (-xf), and the function declarations or signatures (-xh).
--attach-return-type-decl
--convert-tabs #Converts tabs into spaces in the non-indentation part of the line....
--remove-comment-prefix #Remove the preceding '*' in a multi-line comment that begins a line. ...
#--max-code-length=60 #try to break long lines #no more!
--lineend=linux
--formatted #Formatted files display mode. Display only the files that have been formatted. Do not display files that are unchanged.
